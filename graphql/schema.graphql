schema {
  mutation: Mutation
  query: Query
}

enum TransactionState {
  PENDING
  BROADCAST
  EXECUTED
  ABANDONED
  FINALIZED
}

type Transaction {
  id: Int!
  transactionId: String
  state: TransactionState!
  transactionHash: String
  wallet: Wallet
  encodedData: String!
  network: String!
}

type Account {
  publicKey: String
  address: String
}

type Wallet {
  id: Int!
  account: Account
  externalId: String
  managed: Boolean!
  network: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type WalletEdge {
  node: Wallet!
  cursor: String!
}

type WalletConnection {
  edges: [WalletEdge]!
  pageInfo: PageInfo!
  totalCount: Int
}

type TransactionEdge {
  node: Transaction!
  cursor: String!
}

type TransactionConnection {
  edges: [TransactionEdge]!
  pageInfo: PageInfo!
  totalCount: Int
}

type Query {
  GetPendingWallets(after: String, first: Int): WalletConnection
}

type Mutation {

  MarkAndListPendingTransactions(network: String, after: String, first: Int, markAsProcessing: Boolean): TransactionConnection

  UpdateTransaction(
    id: Int!
    signingAccount: String
    state: TransactionState
    transactionHash: String
    signedAtBlock: Int
  ): Boolean!

  SetWalletAccount(
    id: Int!
    account: String!
  ): Boolean!

  UpdateUser(
    account: String!
  ): Boolean!
}
